{"version":3,"sources":["components/TodoList/TodoList.tsx","components/Loader/Loader.tsx","api.ts","components/TodoFilter/TodoFilter.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selected","onSelected","className","map","todo","classNames","id","completed","title","type","onClick","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Filters","TodoModal","onClose","useState","selectedUser","setSelectedUser","loading","setLoading","errorMessage","setErrorMessage","useEffect","userId","catch","finally","href","email","name","TodoFilter","selectedValue","selectFilter","inputValue","onInputChange","onSubmit","event","preventDefault","value","onChange","target","placeholder","style","pointerEvents","App","setTodos","selectedTodo","setSelectedTodo","all","filterBy","setFilterBy","setInputValue","Date","updatedAt","setUpdatedAt","handleCloseModal","useCallback","prepareTodos","filter","query","prepared","active","toLowerCase","includes","preparedTodos","useMemo","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b95970ff.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[];\n  selected: Todo | null;\n  onSelected: (todo: Todo | null) => void;\n}\n\nexport const TodoList: React.FC<Props> = ({ todos, selected, onSelected }) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          className={classNames({\n            'has-background-info-light': selected?.id === todo.id,\n          })}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          {todo.completed ? (\n            <td className=\"is-vcentered\">\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </td>\n          ) : (\n            <td className=\"is-vcentered\" />\n          )}\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={classNames({\n                'has-text-danger': !todo.completed,\n                'has-text-success': todo.completed,\n              })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => onSelected(todo)}\n            >\n              <span className=\"icon\">\n                <i className={classNames('far', {\n                  'fa-eye': selected?.id !== todo.id,\n                  'fa-eye-slash': selected?.id === todo.id,\n                })}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\n\nexport enum Filters {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n\ninterface Props {\n  selectedValue: Filters;\n  selectFilter: (filter: Filters) => void;\n  inputValue: string;\n  onInputChange: (newQuery: string) => void;\n}\n\nexport const TodoFilter: React.FC<Props> = ({\n  selectedValue,\n  selectFilter,\n  inputValue,\n  onInputChange,\n}) => (\n  <form\n    className=\"field has-addons\"\n    onSubmit={(event) => event.preventDefault()}\n  >\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={selectedValue}\n          onChange={(event) => selectFilter(event.target.value as Filters)}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={inputValue}\n        onChange={(event) => onInputChange(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {inputValue && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => onInputChange('')}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\n\ninterface Props {\n  selected: Todo;\n  onClose: () => void;\n}\n\nexport const TodoModal: React.FC<Props> = ({ selected, onClose }) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    setLoading(true);\n    getUser(selected.userId)\n      .then(setSelectedUser)\n      .catch(() => setErrorMessage('Cannot find a user, please try later'))\n      .finally(() => setLoading(false));\n  }, [selected]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selected.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          {errorMessage ? (\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {errorMessage}\n              </p>\n            </div>\n          ) : (\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {selected.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {/* <strong className=\"has-text-success\">Done</strong> */}\n                <strong className={classNames({\n                  'has-text-danger': !selected.completed,\n                  'has-text-success': selected.completed,\n                })}\n                >\n                  {selected.completed ? 'Done' : 'Planned'}\n                </strong>\n\n                {' by '}\n\n                <a href={`mailto:${selectedUser?.email}`}>\n                  {selectedUser?.name}\n                </a>\n              </p>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { Filters, TodoFilter } from './components/TodoFilter';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [filterBy, setFilterBy] = useState<Filters>(Filters.all);\n  const [inputValue, setInputValue] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [updatedAt, setUpdatedAt] = useState(new Date());\n\n  useEffect(() => {\n    setLoading(true);\n    getTodos()\n      .then(setTodos)\n      .catch(() => setErrorMessage('Try again later...'))\n      .finally(() => setLoading(false));\n  }, [updatedAt]);\n\n  const handleCloseModal = useCallback(() => setSelectedTodo(null), []);\n\n  const prepareTodos = useCallback((filter: Filters, query: string) => {\n    let prepared = todos;\n\n    if (filter !== Filters.all) {\n      switch (filter) {\n        case Filters.active:\n          prepared = prepared.filter(todo => !todo.completed);\n          break;\n\n        case Filters.completed:\n          prepared = prepared.filter(todo => todo.completed);\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    if (query) {\n      prepared = prepared.filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n    }\n\n    return prepared;\n  }, [todos]);\n\n  const preparedTodos = useMemo(\n    () => prepareTodos(filterBy, inputValue),\n    [filterBy, inputValue, prepareTodos],\n  );\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectedValue={filterBy}\n                selectFilter={setFilterBy}\n                inputValue={inputValue}\n                onInputChange={setInputValue}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading && <Loader />}\n\n              {(!loading && todos.length > 0) && (\n                <TodoList\n                  todos={preparedTodos}\n                  selected={selectedTodo}\n                  onSelected={setSelectedTodo}\n                />\n              )}\n\n              {errorMessage && (\n                <p className=\"is-flex is-justify-content-space-between notification is-danger is-align-content-center\">\n                  {errorMessage}\n\n                  <button\n                    className={classNames('button', 'is-primary', 'is-pulled-right', '', {\n                      'is-loading': loading,\n                    })}\n                    type=\"button\"\n                    onClick={() => setUpdatedAt(new Date())}\n                  >\n                    reload\n                  </button>\n                </p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal selected={selectedTodo} onClose={handleCloseModal} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}